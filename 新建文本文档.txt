<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>哈希彩票预测工具</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
        #prediction {
            font-size: 20px;
            margin-top: 20px;
            font-weight: bold;
        }
        input[type="number"] {
            padding: 10px;
            font-size: 16px;
            width: 50%;
            margin-bottom: 20px;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>哈希彩票预测工具</h1>
    <p>请输入历史5位开奖号码（例如：12345），系统将预测下一期的数字：</p>

    <!-- 用户输入5位数 -->
    <input type="number" id="inputNumbers" min="0" max="99999" placeholder="请输入5位数字" maxlength="5">
    
    <!-- 按钮触发预测 -->
    <button onclick="predict()">预测</button>
    
    <!-- 显示预测结果 -->
    <p id="prediction"></p>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script>
        // 模拟历史数据（示例）
        const data = [
            [1, 2, 3, 4, 5], 
            [3, 4, 5, 6, 7], 
            [2, 3, 5, 6, 8],
            [4, 5, 6, 7, 9],
            [1, 4, 2, 9, 5],
            [6, 7, 8, 9, 0], 
            [2, 3, 6, 7, 8], // 更多历史数据
            [8, 9, 4, 5, 1],
            [7, 2, 9, 6, 4],
            [5, 8, 3, 1, 7]
        ];

        const labels = [1, 2, 3, 4, 5];  // 模拟预测的标签（目标数字）

        // 标准化数据
        const normalizedData = data.map(row => row.map(num => num / 10));

        // 创建神经网络模型
        const model = tf.sequential();
        model.add(tf.layers.dense({units: 32, activation: 'relu', inputShape: [5]}));  // 增加隐藏层
        model.add(tf.layers.dense({units: 64, activation: 'relu'}));  // 增加更多的神经元
        model.add(tf.layers.dense({units: 1}));

        // 编译模型
        model.compile({optimizer: 'adam', loss: 'meanSquaredError'});

        // 将数据和标签转为 TensorFlow 张量
        const xs = tf.tensor2d(normalizedData);
        const ys = tf.tensor1d(labels);

        // 训练模型
        async function trainModel() {
            await model.fit(xs, ys, {epochs: 200}); // 增加训练的次数
        }

        // 调用训练函数
        trainModel();

        // 使用模型预测
        async function predict() {
            const input = document.getElementById('inputNumbers').value;
            if (input.length !== 5) {
                document.getElementById('prediction').innerText = '请输入一个 5 位数字！';
                return;
            }

            const inputArray = input.split('').map(Number); // 转换输入为数组
            const normalizedInput = inputArray.map(num => num / 10); // 标准化输入

            // 将输入转换为 TensorFlow 张量
            const inputTensor = tf.tensor2d([normalizedInput]);

            // 使用训练好的模型进行预测
            const prediction = model.predict(inputTensor);
            prediction.array().then(pred => {
                // 显示预测结果
                const predictedNumber = Math.round(pred[0][0] * 10); // 恢复数字
                document.getElementById('prediction').innerText = `预测的下一期数字是：${predictedNumber}`;
            });
        }
    </script>
</body>
</html>
